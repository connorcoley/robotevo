71DC9529
20140812_155106 Admin           
                                                                                                                                
Administrator                                                                                                                   
--{ RES }--
V;200
--{ CFG }--
999;219;32;
14;-1;-1;-1;-1;-1;-1;16;43;251;-1;-1;251;-1;-1;37;-1;-1;-1;-1;-1;-1;-1;104;-1;16;5;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;3;Trough 100ml;Trough 100ml;Trough 100ml;
998;1-VEL-ElutionBuffer;2-Vl Lysis Buffer;3-VEB Binding Buffer;
998;1;Tube Eppendorf 2mL 16 Pos;
998;Reactives;
998;1;Tube Eppendorf 3x 16 PosR;
998;Eluat;
998;0;
998;0;
998;1;Tube Eppendorf 3x 16 Pos;
998;Proben;
998;0;
998;0;
998;2;Tube Eppendorf 48 Pos;Tube Eppendorf 48 Pos;
998;48 Pos Heat;48PosMagnet;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;8;Washstation 2Grid Cleaner short;Washstation 2Grid Waste;Washstation 2Grid Cleaner long;Trough 100ml;Trough 100ml;Trough 100ml;Washstation 2Grid DiTi Waste;;
998;;;;4-VEW1 Wash Buffe;5-VEW2-WashBuffer;6-Waste;;;
998;0;
998;3;Trough 100ml;Trough 100ml;Trough 100ml;
998;7-EtOH80p;8-Unnused;9-Unnused;
998;3;DiTi 1000ul;DiTi 1000ul;DiTi 1000ul;
998;1000-1;1000-2;1000-3;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;0;
998;2;
998;4;0;System;
998;4;1;Te-MagS portrait;
998;1;
998;37;Tube Eppendorf 48 Pos;
998;1;
998;1;
996;0;0;
--{ RPG }--
Group("Helper const");
Variable(false,"0",0,"",0,50.000000,200.000000,0,2,0,0);
Variable(true,"1",0,"",0,50.000000,200.000000,0,2,0,0);
Variable(no,"false",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(yes,"true",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(none,"false",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(buffer_,"10",0,"Type of reactive (determine from..)",0,50.000000,200.000000,0,2,0,0);
Variable(reactive_,"11",0,"Type of reactive (determine from..)",0,50.000000,200.000000,0,2,0,0);
Variable(ToMix,"none",0,"Direction of pipeting. Only mixing, no waste!!",0,50.000000,200.000000,0,2,0,0);
Variable(ToSamples,"20",0,"Direction of pipeting",0,50.000000,200.000000,0,2,0,0);
Variable(ToMag,"21",0,"Direction of pipeting",0,50.000000,200.000000,0,2,0,0);
Variable(ToWaste,"26",0,"Direction of pipeting.",0,50.000000,200.000000,0,2,0,0);
Variable(ToEluate,"27",0,"Direction of pipeting.",0,50.000000,200.000000,0,2,0,0);
Variable(ReactiveToSamples,"22",0,"Direction of pipeting",0,50.000000,200.000000,0,2,0,0);
Variable(BufferToSamples,"23",0,"Direction of pipeting",0,50.000000,200.000000,0,2,0,0);
Variable(ReactiveToMag,"24",0,"Direction of pipeting",0,50.000000,200.000000,0,2,0,0);
Variable(BufferToMag,"25",0,"Direction of pipeting",0,50.000000,200.000000,0,2,0,0);
Variable(MixFull,"30",0,"Type of mixing",0,50.000000,200.000000,0,2,0,0);
Variable(MixNormal,"MixFull",0,"Type of mixing",0,50.000000,200.000000,0,2,0,0);
Variable(MixFew,"31",0,"Type of mixing",0,50.000000,200.000000,0,2,0,0);
Variable(MixEluate,"MixFew",0,"Type of mixing",0,50.000000,200.000000,0,2,0,0);
GroupEnd();
Group("Robot config");
Comment("+++ Mag act 48gr");
FACTS("Te-MagS","Te-MagS_ActivateHeater","48","0","");
Comment("+++ Mag act 48gr  pos 0");
FACTS("Te-MagS","Te-MagS_MoveToPosition","0","0","");
Variable(Tip_tNum,"4",1,"Nummer of tips",1,1.000000,4.000000,0,2,1,1);
Variable(tip_m[1],"1",0,"Max Vol to aspire",0,1.000000,1000.000000,0,2,0,0);
Variable(tips_m[1],"1",0,"Max Vol to aspire",0,1.000000,1000.000000,0,2,0,0);
BeginLoop("Tip_tNum-1","tip");
Variable(tip,"LOOP_tip+1",0,"Max Vol to aspire",0,1.000000,1000.000000,0,2,0,0);
Variable(tip_m[~tip~],"tip_m[~tip - 1~] * 2",0,"Max Vol to aspire",0,1.000000,1000.000000,0,2,0,0);
Variable(tips_m[~tip~],"tips_m[~tip-1~] + tip_m[~tip~]",0,"Max Vol to aspire",0,1.000000,1000.000000,0,2,0,0);
EndLoop();
Variable(Tip200_maxV,"193",1,"Max vol 200킠 tips",1,100.000000,193.000000,0,2,1,1);
Variable(Tip1000_maxV,"950",1,"Max vol 1000킠 tips",1,700.000000,950.000000,0,2,1,1);
Variable(Disp_tCols,"6",1,"Nummer of columns",1,1.000000,6.000000,0,2,1,1);
Variable(Disp_tRows,"8",1,"Nummer of rows",1,1.000000,8.000000,0,2,1,1);
Variable(Tips_tRacks,"3",1,"Nummer of 1000-tips racks",1,1.000000,3.000000,0,2,1,1);
GroupEnd();
Group("State variables (and global arguments)");
Variable(React.Next,"0",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
BeginLoop("Tip_tNum","tip");
Variable(tipV[~LOOP_tip~],"0",0,"Max Vol to aspire",0,1.000000,1000.000000,0,2,0,0);
EndLoop();
Variable(ReUseTips,"yes",1,"Reuse Tips (1 :yes; 0 :no)? ",1,0.000000,1.000000,0,2,1,1);
Variable(PreserveTips,"yes",0,"Preserve Tips (y/n)? ",0,1.000000,1000.000000,0,2,0,0);
Variable(ReUsedTipRack,"1",1,"First tip to reuse in Rack Site: ",1,1.000000,3.000000,0,2,1,0);
Variable(ReUsedTipColumn,"1",1,"First tip to reuse in Column: ",1,1.000000,12.000000,0,2,1,0);
Variable(ReUsedTipRow,"1",1,"First tip to reuse in Row: ",1,1.000000,8.000000,0,2,1,0);
Variable(ReUsedTipWell,"(ReUsedTipColumn-1)*8 + ReUsedTipRow ",0,"First tip to reuse ",0,1.000000,1000.000000,0,2,0,0);
Set_DITI_Counter2("DiTi 1000ul","25","~ReUsedTipRack~","~ReUsedTipWell~",0);
Variable(ReUsedTipBeg,"((ReUsedTipRack -1) * 96) + ReUsedTipWell - 1",0,"First tip to reuse ",0,1.000000,1000.000000,0,2,0,0);
Variable(NextPos4ReUsedTip,"ReUsedTipBeg",0,"Where will the next tip back?",0,1.000000,1000.000000,0,2,0,0);
Variable(Drop,"no",0,"Drop Tips at end (y/n)? ",0,1.000000,1000.000000,0,2,0,0);
Variable(REPLACE_DITI_GRID,"25",0,"Lysis Buffer in position (1):",0,1.000000,9.000000,0,2,0,0);
Variable(REPLACE_DITI_SITE,"1",0,"Lysis Buffer in position (1):",0,1.000000,9.000000,0,2,0,0);
ActivateADH("DiTi 1000ul","C:\ProgramData\Tecan\EVOware\database\Scripts\avr_Tips1000.esc");
Variable(NoDrops,"0",0,"Tip Mask not droped",0,1.000000,1000.000000,0,2,0,0);
Variable(Dispense,"none",0,"direction of pipeting: ReactiveToSamples,  R2M B2S B2M",0,1.000000,8.000000,0,2,0,0);
Variable(WasteTo,"none",0,"R2S R2M B2S B2M",0,1.000000,8.000000,0,2,0,0);
Variable(MagMix,"MixFull",0,"Type of mixing",0,1.000000,8.000000,0,2,0,0);
Variable(AccumulatedVol,"0",0,"Vol accumulatzed in the epi on Mag",0,1.000000,50.000000,0,2,0,0);
GroupEnd();
Group("RNA ext- General. Initializations");
Variable(SampleNum,"6",1,"Number of samples (6)",1,1.000000,48.000000,0,2,1,1);
Variable(Dispense_Lysis_Mix,"no",1,"Dispense Full Lysis Mix(1:yes;0:no) LysB+ProtK+RNA carrier+MS2 ?",1,0.000000,1.000000,0,2,1,1);
Variable(preInactiveSample,"no",1,"Are samples inactivated with Lysis Buffer(1 :yes; 0 :no)?",1,0.000000,1.000000,0,2,1,1);
Variable(preInactiveSampleFullMix,"no",1,"Samples inactived Full(1 :yes; 0 :no) LysB+ProtK+RNA carrier+MS2",1,0.000000,1.000000,0,2,1,1);
Variable(Mix_ex ,"8",1,"Pre-mix excess Volumen percent (8%):",1,0.000000,30.000000,0,2,1,1);
Variable(ex," 1+  Mix_ex / 100",0,"Proteinase K Vol",0,1.000000,1000.000000,0,2,0,0);
Group("IC_MS2_00 React");
Variable(name,"IC MS2 (bacterial phage culture)",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,1,2,0,0);
Variable(Vol1sample,"20",1,"InternalControl MS2 (20 킠)",1,0.000000,50.000000,0,2,1,1);
Variable(Pos,"14",1,"InternalControl MS2 in well:",1,1.000000,16.000000,0,2,1,1);
Variable(Type,"reactive_",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(Replies,"1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Group("Actualising");
Variable(IC_MS2_00,"0",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[0].name,"~name~",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,1,2,0,0);
Variable(this,"IC_MS2_00",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].V1s,"Vol1sample",0,"Proteinase K (20 킠)?",0,1.000000,30.000000,0,2,0,0);
Variable(React[~this~].Pos,"Pos",0,"Proteinase K Vol in well (16):",0,1.000000,16.000000,0,2,0,0);
Variable(React[~this~].Replies,"Replies",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].Type,"Type",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].Vol,"SampleNum * React[~this~].V1s * ex",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(NextReact,"this+1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
GroupEnd();
GroupEnd();
Group("IC2_01 React");
Variable(name,"IC2 (synthetic RNA)",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,1,2,0,0);
Variable(Vol1sample,"0",1,"InternalControl IC2 (0 킠)",1,0.000000,10.000000,0,2,1,1);
Variable(Pos,"11",1,"InternalControl IC2 in well (11):",1,1.000000,16.000000,0,2,1,1);
Variable(Type,"reactive_",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(Replies,"1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Group("Actualising");
Variable(IC2_01,"1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[1].name,"~name~",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,1,2,0,0);
Variable(this,"IC2_01",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].V1s,"Vol1sample",0,"Proteinase K (20 킠)?",0,1.000000,30.000000,0,2,0,0);
Variable(React[~this~].Pos,"Pos",0,"Proteinase K Vol in well (16):",0,1.000000,16.000000,0,2,0,0);
Variable(React[~this~].Replies,"Replies",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].Type,"Type",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].Vol,"SampleNum * React[~this~].V1s * ex",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(NextReact,"this+1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
GroupEnd();
GroupEnd();
Group("ElutBuf_02 React");
Variable(name,"Elution Buffer",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,1,2,0,0);
Variable(Vol1sample,"100",1,"Elution Buffer VEL (100 킠 )?",1,40.000000,190.000000,0,2,1,1);
Variable(Pos,"8",1,"Elution Buffer VEL  in position (8):",1,1.000000,9.000000,0,2,1,1);
Variable(Type,"buffer_",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(Replies,"1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Group("Actualising");
Variable(ElutBuf_02,"2",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[2].name,"~name~",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,1,2,0,0);
Variable(this,"ElutBuf_02",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].V1s,"Vol1sample",0,"Proteinase K (20 킠)?",0,1.000000,30.000000,0,2,0,0);
Variable(React[~this~].Pos,"Pos",0,"Proteinase K Vol in well (16):",0,1.000000,16.000000,0,2,0,0);
Variable(React[~this~].Replies,"Replies",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].Type,"Type",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(React[~this~].Vol,"SampleNum * React[~this~].V1s * ex",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
Variable(NextReact,"this+1",0,"Sample volumen to use?(200 킠)",0,50.000000,200.000000,0,2,0,0);
GroupEnd();
GroupEnd();
UserPrompt("Reactive Position ~React[0].Pos~: >~React[0].Vol~ 킠 of ~React[0].name~Reactive Position ~React[1].Pos~: >~React[1].Vol~ 킠 of ~React[1].name~Buffer Position ~React[2].Pos~: >~React[2].Vol/1000~ mL of ~React[2].name~Rack Eluates: Place ~SampleNum~ clean epp tubes to colect the RNA. ",2,-1);
GroupEnd();
IfThen("SampleNum",2,"Disp_tRows * Disp_tCols");
UserPrompt("Error?",1,-1);
Else();
EndIf();
IfThen("SampleNum",3,"Tip_tNum");
Variable(Tip_tNum,"SampleNum % Tip_tNum",0,"",0,1.000000,10.000000,0,2,0,0);
Else();
EndIf();
Variable(TIP_MASK,"tips_m[~Tip_tNum~]",0,"",0,1.000000,10.000000,0,2,0,0);
